[{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 metaphlanToPhyloseq authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/articles/metaphlanToPhyloseq.html","id":"automatic-directly-from-path","dir":"Articles","previous_headings":"","what":"1. Automatic: Directly from path","title":"Introduction to metaphlanToPhyloseq","text":"part relatively straight forward. Simply specify file path MetaPhlAn profile(s) converted mtphlan_profile. multiple profiles (merged_profiles = TRUE) used metadata samples available, add metadata point column containing sample names sample_column. function compare profile sample names found metadata keep shared two. taxa_lvl used specify taxonomic level filter profile . Valid options ‘kingdom’, ‘phylum’, ‘class’, ‘order’, ‘family’, ‘genus’, ‘species’. First letter abbreviations also accepted. use_taxa_names = TRUE possible use taxonomic names instead numbered OTUs resulting phyloseq object. Compare row names otu table taxonomy table .","code":"path <- system.file(\"extdata/SRS014470-Tongue_dorsum_profile.txt\", package = \"metaphlanToPhyloseq\") single_profile <- metaphlan_to_phyloseq(   mtphlan_profile = path,   metadata = NULL,   taxa_lvl = \"Species\",   sample_column = NULL,   use_taxa_names = TRUE,   merged_profiles = FALSE ) head(single_profile@otu_table) #> OTU Table:          [2 taxa and 1 samples] #>                      taxa are rows #>                      relative_abundance #> Veillonella_dispar             74.02531 #> Prevotella_histicola           25.97469  path <- system.file(\"extdata/merged_abundance_table.txt\", package = \"metaphlanToPhyloseq\") merged_profiles <- metaphlan_to_phyloseq(   path,   taxa_lvl = \"o\",   use_taxa_names = FALSE ) head(merged_profiles@tax_table) #> Taxonomy Table:     [6 taxa by 4 taxonomic ranks]: #>      Kingdom    Phylum           Class                 Order               #> Otu1 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Moraxellales\"      #> Otu2 \"Bacteria\" \"Actinobacteria\" \"Actinomycetia\"       \"Corynebacteriales\" #> Otu3 \"Bacteria\" \"Firmicutes\"     \"Negativicutes\"       \"Veillonellales\"    #> Otu4 \"Bacteria\" \"Bacteroidota\"   \"Bacteroidia\"         \"Bacteroidales\"     #> Otu5 \"Bacteria\" \"Firmicutes\"     \"Bacilli\"             \"Lactobacillales\"   #> Otu6 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Pasteurellales\""},{"path":[]},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/articles/metaphlanToPhyloseq.html","id":"with-metaphlan_to_phyloseq","dir":"Articles","previous_headings":"2. Manual: Load and prepare data with the help of utility functions","what":"2.1 With metaphlan_to_phyloseq()","title":"Introduction to metaphlanToPhyloseq","text":"MetaPhlAn profiles loaded directly metaphlan_to_phyloseq(), whether editing names subsetting columns rows, additional step necessary single profiles case, since also contain non-numeric ‘NCBI_tax_id’ ‘additional_species’ columns, need dropped metaphlan_to_phyloseq() work.","code":"# Structure of a single MetaPhlAn microbiome profile head(single_abundance_profile, 3) #>                    clade_name NCBI_tax_id relative_abundance additional_species #> 1                 k__Bacteria           2          100.00000                    #> 2   k__Bacteria|p__Firmicutes      2|1239           74.02531                    #> 3 k__Bacteria|p__Bacteroidota       2|976           25.97469  # Keep only the columns of interest (clade_name and relative_abundance) single_profile <- single_abundance_profile[, c(1, 3)]  # Create a phyloseq object from a single pre-loaded profile... physeq_single <- metaphlan_to_phyloseq(   mtphlan_profile = single_profile,   taxa_lvl = \"genus\" )  # ... or from multiple merged profiles class(merged_abundance_profiles) #> [1] \"data.frame\"  physeq_merged <- metaphlan_to_phyloseq(   merged_abundance_profiles,   taxa_lvl = \"Species\" )"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/articles/metaphlanToPhyloseq.html","id":"manually-without-metaphlan_to_phyloseq","dir":"Articles","previous_headings":"2. Manual: Load and prepare data with the help of utility functions","what":"2.2 Manually without metaphlan_to_phyloseq()","title":"Introduction to metaphlanToPhyloseq","text":"example workflow manually loaded MetaPhlAn profiles without metaphlan_to_phyloseq() function examples removing patterns column names filtering low abundance entries.","code":"merged_profiles <- merged_abundance_profiles  colnames(merged_profiles) #> [1] \"clade_name\"                     \"SRS014459.Stool\"                #> [3] \"SRS014464.Anterior_nares\"       \"SRS014470.Tongue_dorsum\"        #> [5] \"SRS014472.Buccal_mucosa\"        \"SRS014476.Supragingival_plaque\" #> [7] \"SRS014494.Posterior_fornix\"  # Remove the SRS0144... from the columnames, keeping only their sample type/origin merged_profiles <- clean_colnames(merged_profiles, pattern = \"SRS0144\\\\d{2}.\") colnames(merged_profiles) #> [1] \"clade_name\"           \"Stool\"                \"Anterior_nares\"       #> [4] \"Tongue_dorsum\"        \"Buccal_mucosa\"        \"Supragingival_plaque\" #> [7] \"Posterior_fornix\"  # Filter to only include the chosen taxonomic rank merged_profiles_species <- filter_taxa_lvl(merged_profiles, \"Species\")  # Merge all rows, where all values per sample are below the specified threshold, into 'Other' row  merged_profiles_filtered <- filter_threshold(merged_profiles_species, threshold = 15)  # Create the taxonomic table taxmat <- get_taxa_table(merged_profiles_filtered, taxa_lvl = \"Species\")  # Add the row names from the taxonomic table so they are the same in both rownames(merged_profiles_filtered) <- rownames(taxmat)  # Remove clade_name column, otherwise phyloseq cannot create the otu_table due to it being character merged_profiles_filtered$clade_name <- NULL  # Create the otu_table- and taxonomyTable-class objects otutab <- phyloseq::otu_table(merged_profiles_filtered, taxa_are_rows = TRUE) taxtab <- phyloseq::tax_table(taxmat)  # Create the phyloseq object physeq <- phyloseq::phyloseq(otutab, taxtab)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeremy Rotzetter. Author, maintainer.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jérémy Rotzetter (2024). metaphlanToPhyloseq. https://github.com/jrotzetter/metaphlanToPhyloseq.","code":"@Manual{,   title = {metaphlanToPhyloseq},   author = {{Jérémy Rotzetter}},   year = {2024},   url = {https://github.com/jrotzetter/metaphlanToPhyloseq}, }"},{"path":[]},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"metaphlanToPhyloseq simple R package transform MetaPhlAn 4 taxonomic microbiome abundance profiles right format easy creation phyloseq object.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"can install development version metaphlanToPhyloseq GitHub : Alternatively can also use pak package: remotes package:","code":"# install.packages(\"devtools\") devtools::install_github(\"jrotzetter/metaphlanToPhyloseq\", build_vignettes = TRUE) # install.packages(\"pak\") pak::pak(\"jrotzetter/metaphlanToPhyloseq\") # install.packages(\"remotes\") remotes::install_github(\"jrotzetter/metaphlanToPhyloseq\", build_vignettes = TRUE)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"dplyr (>= 1.1.4) phyloseq (>= 1.46.0) utils","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"details please see vignette(\"metaphlanToPhyloseq\") help pages documentation. also available online https://jrotzetter.github.io/metaphlanToPhyloseq/.","code":"library(metaphlanToPhyloseq)  # Filter data to only include the specified taxonomic rank single_profile <- filter_taxa_lvl(df = single_abundance_profile, taxa_lvl = \"Genus\") merged_profiles <- filter_taxa_lvl(df = merged_abundance_profiles, taxa_lvl = \"s\")  # Keep only the columns of interest (clade_name and relative_abundance) single_profile <- single_profile[, c(1, 3)]  # Create a phyloseq object physeq_single <- metaphlan_to_phyloseq(   mtphlan_profile = single_profile,   taxa_lvl = \"genus\",   use_taxa_names = TRUE )  physeq_merged <- metaphlan_to_phyloseq(   merged_profiles,   taxa_lvl = \"Species\" )"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"planned-features","dir":"","previous_headings":"","what":"Planned features","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"Add valid, package-specific maintainer e-mail address Add unit tests Potential CRAN submission maturation expansion package (tree support, visualisations) future","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"encounter bug, please file issue minimal reproducible example GitHub. questions help MetaPhlAn, please visit corresponding bioBakery forum. help phyloseq, helpful tutorials articles can found GitHub.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Convert MetaPhlAn taxonomic profiles to phyloseq objects","text":"Released MIT @jrotzetter. license means: can freely copy, modify, distribute reuse software. original license must included copies software. Please link back repo use significant portion source code. software provided “”, without warranty kind.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/add_otu.html","id":null,"dir":"Reference","previous_headings":"","what":"Add OTUs as row names — add_otu","title":"Add OTUs as row names — add_otu","text":"function adds numbered Operational Taxonomic Units (OTUs) row names data frame. Optionally can also add OTU column data frame.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/add_otu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add OTUs as row names — add_otu","text":"","code":"add_otu(df, add_column = FALSE)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/add_otu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add OTUs as row names — add_otu","text":"df input MetaPhlAn data frame. add_column Logical value indicating whether add OTU column data frame. Default FALSE.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/add_otu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add OTUs as row names — add_otu","text":"data frame OTU row names added.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/add_otu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add OTUs as row names — add_otu","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/add_otu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add OTUs as row names — add_otu","text":"","code":"df <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6)) add_otu(df) # Adds OTU row names to the data frame #>      x y #> Otu1 1 4 #> Otu2 2 5 #> Otu3 3 6 add_otu(df, add_column = TRUE) # Adds OTU column and row names to the data frame #>      x y  Otu #> Otu1 1 4 Otu1 #> Otu2 2 5 Otu2 #> Otu3 3 6 Otu3"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove pattern from column names — clean_colnames","title":"Remove pattern from column names — clean_colnames","text":"Function remove pattern column names.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove pattern from column names — clean_colnames","text":"","code":"clean_colnames(df, pattern)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove pattern from column names — clean_colnames","text":"df data frame matrix. pattern character string pattern match.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove pattern from column names — clean_colnames","text":"Returns input table specified pattern removed column names.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_colnames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove pattern from column names — clean_colnames","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove pattern from column names — clean_colnames","text":"","code":"colnames(merged_abundance_profiles) #> [1] \"clade_name\"                     \"SRS014459.Stool\"                #> [3] \"SRS014464.Anterior_nares\"       \"SRS014470.Tongue_dorsum\"        #> [5] \"SRS014472.Buccal_mucosa\"        \"SRS014476.Supragingival_plaque\" #> [7] \"SRS014494.Posterior_fornix\"      names_cleaned <- clean_colnames(merged_abundance_profiles, \"SRS0144\\\\d{2}.\")  colnames(names_cleaned) #> [1] \"clade_name\"           \"Stool\"                \"Anterior_nares\"       #> [4] \"Tongue_dorsum\"        \"Buccal_mucosa\"        \"Supragingival_plaque\" #> [7] \"Posterior_fornix\""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","title":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","text":"clean_metadata() function designed clean prepare metadata MetaPhlAn profile analysis keeping shared samples.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","text":"","code":"clean_metadata(metadata, mtphlan_profile, sample_column, remove_spaces = TRUE)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","text":"metadata data frame containing metadata information. mtphlan_profile data frame containing metaphlan profile information. Samples columns. sample_column character string. column metadata containing sample names. match column names MetaPhlAn profile. remove_spaces spaces (\" \") replaced \"_\" column names?","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","text":"cleaned metadata data frame.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/clean_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Only keep shared samples between metadata and MetaPhlAn profile — clean_metadata","text":"","code":"metadata <- data.frame(   Sample_name = c(\"A\", \"B\", \"C\", \"D\", \"F\", \"G\"),   Sex = c(rep(c(\"F\", \"M\"))) )  mtphlan_profile <- data.frame(   clade_name = c(\"x\", \"y\", \"z\"),   A = c(1, 2, 3),   B = c(4, 5, 6),   D = c(7, 8, 9),   Z = c(10, 11, 12) )  cleaned_metadata <- clean_metadata(metadata, mtphlan_profile, \"Sample_name\") #> Metadata and profile Sample_names match.  print(cleaned_metadata) #>   Sample_name Sex #> 1           A   F #> 2           B   M #> 4           D   M"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/col_to_rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a column as row names — col_to_rownames","title":"Set a column as row names — col_to_rownames","text":"function sets specified column row names data frame.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/col_to_rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a column as row names — col_to_rownames","text":"","code":"col_to_rownames(df, column)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/col_to_rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a column as row names — col_to_rownames","text":"df input data frame. column character string. name column set row names.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/col_to_rownames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a column as row names — col_to_rownames","text":"input data frame specified column set row names.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/col_to_rownames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a column as row names — col_to_rownames","text":"","code":"df <- data.frame(   clade_name = c(\"A\", \"B\", \"C\"),   col1 = c(10, 20, 5),   col2 = c(8, 15, 3),   col3 = c(64, 89, 32) ) col_to_rownames(df, \"clade_name\") #>   col1 col2 col3 #> A   10    8   64 #> B   20   15   89 #> C    5    3   32"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_taxa_lvl.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","title":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","text":"Function filter rows MetaPhlAn profile based selected taxonomic level. Used profile yet separated taxonomic ranks.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_taxa_lvl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","text":"","code":"filter_taxa_lvl(df, taxa_lvl)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_taxa_lvl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","text":"df data frame. Assumes clade names structure k__Bacteria|p__Firmicutes|c__Bacilli|o__Lactobacillales|f__Lactobacillaceae found 'clade_name' column. taxa_lvl character string. taxonomic level extract ('kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'). First letter abbreviations (e.g., 's') also accepted.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_taxa_lvl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","text":"filtered data frame.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_taxa_lvl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_taxa_lvl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter MetaPhlAn profile by taxonomic rank — filter_taxa_lvl","text":"","code":"filtered_profile <- filter_taxa_lvl(merged_abundance_profiles, \"Class\") head(filtered_profile) #>                                             clade_name SRS014459.Stool #> 1 k__Bacteria|p__Proteobacteria|c__Gammaproteobacteria               0 #> 2       k__Bacteria|p__Actinobacteria|c__Actinomycetia               0 #> 3           k__Bacteria|p__Firmicutes|c__Negativicutes               0 #> 4           k__Bacteria|p__Bacteroidota|c__Bacteroidia               0 #> 5                 k__Bacteria|p__Firmicutes|c__Bacilli               0 #>   SRS014464.Anterior_nares SRS014470.Tongue_dorsum SRS014472.Buccal_mucosa #> 1                 81.20128                 0.00000                 14.7449 #> 2                 18.79872                 0.00000                  0.0000 #> 3                  0.00000                74.02531                  0.0000 #> 4                  0.00000                25.97469                  0.0000 #> 5                  0.00000                 0.00000                 85.2551 #>   SRS014476.Supragingival_plaque SRS014494.Posterior_fornix #> 1                        0.00000                          0 #> 2                       85.43048                          0 #> 3                        0.00000                          0 #> 4                        0.00000                          0 #> 5                       14.56952                        100"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply threshold filtering to a data frame — filter_threshold","title":"Apply threshold filtering to a data frame — filter_threshold","text":"function applies threshold filtering data frame, summing values threshold column, storing sum new '' row, values within row (taxon) across columns threshold.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply threshold filtering to a data frame — filter_threshold","text":"","code":"filter_threshold(df, threshold, merged_profiles = TRUE)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply threshold filtering to a data frame — filter_threshold","text":"df input data frame merged MetaPhlAn profiles. threshold threshold value filtering. merged_profiles Logical; TRUE (default) file loaded assumed multiple merged MetaPhlAn profiles.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply threshold filtering to a data frame — filter_threshold","text":"filtered data frame.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply threshold filtering to a data frame — filter_threshold","text":"Function can applied single MetaPhlAn profile setting merged_profiles = FALSE. Likewise also works merged profiles slicing data frame clade_name numeric sample column interest. cases clade_name column required.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply threshold filtering to a data frame — filter_threshold","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/filter_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply threshold filtering to a data frame — filter_threshold","text":"","code":"df <- data.frame(   clade_name = c(\"A\", \"B\", \"C\", \"D\"),   col1 = c(10, 20, 5, 65),   col2 = c(8, 15, 3, 38),   col3 = c(5, 35, 4, 6) ) print(df) #>   clade_name col1 col2 col3 #> 1          A   10    8    5 #> 2          B   20   15   35 #> 3          C    5    3    4 #> 4          D   65   38    6 df_thresh <- filter_threshold(df, 11) print(df_thresh) #>   clade_name col1 col2 col3 #> 1          B   20   15   35 #> 2          D   65   38    6 #> 3      Other   15   11    9"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/first_letter_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the case of the first letter in each word of a character string — capitalize_str","title":"Modify the case of the first letter in each word of a character string — capitalize_str","text":"functions take character string input return new character string first letter word modified either uppercase lowercase.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/first_letter_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the case of the first letter in each word of a character string — capitalize_str","text":"","code":"capitalize_str(character_string)  lowercase_str(character_string)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/first_letter_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the case of the first letter in each word of a character string — capitalize_str","text":"character_string character vector containing strings modified.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/first_letter_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the case of the first letter in each word of a character string — capitalize_str","text":"character vector first letter word modified either uppercase lowercase.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/first_letter_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the case of the first letter in each word of a character string — capitalize_str","text":"","code":"capitalize_str(\"hello world\") # Returns \"Hello World\" #> [1] \"Hello world\" capitalize_str(c(\"hello\", \"world\")) # Returns c(\"Hello\", \"World\") #> [1] \"Hello\" \"World\" lowercase_str(\"Hello World\") # Returns \"hello world\" #> [1] \"hello World\" lowercase_str(c(\"Hello\", \"World\")) # Returns c(\"hello\", \"world\") #> [1] \"hello\" \"world\""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic table — get_taxa_table","title":"Get taxonomic table — get_taxa_table","text":"Function extract taxonomic information data frame prepare phyloseq.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic table — get_taxa_table","text":"","code":"get_taxa_table(df, taxa_lvl, taxa_are_rows = FALSE, use_taxa_names = FALSE)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic table — get_taxa_table","text":"df input data frame. taxa_lvl taxonomic level extract ('kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'). First letter abbreviations (e.g., 's') also accepted. taxa_are_rows Logical; TRUE, taxa information row names data frame, otherwise assumed 'clade_name' column. use_taxa_names Logical; TRUE, assign taxa names row names, otherwise assign Otu row names.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic table — get_taxa_table","text":"taxonomic matrix.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get taxonomic table — get_taxa_table","text":"Assumes input data frame already filtered specific taxonomic level.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get taxonomic table — get_taxa_table","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/get_taxa_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic table — get_taxa_table","text":"","code":"taxmat <- get_taxa_table(species_only, taxa_lvl = \"s\") head(taxmat) #>      Kingdom    Phylum           Class                 Order               #> Otu1 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Moraxellales\"      #> Otu2 \"Bacteria\" \"Actinobacteria\" \"Actinomycetia\"       \"Corynebacteriales\" #> Otu3 \"Bacteria\" \"Firmicutes\"     \"Negativicutes\"       \"Veillonellales\"    #> Otu4 \"Bacteria\" \"Bacteroidota\"   \"Bacteroidia\"         \"Bacteroidales\"     #> Otu5 \"Bacteria\" \"Firmicutes\"     \"Bacilli\"             \"Lactobacillales\"   #> Otu6 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Pasteurellales\"    #>      Family               Genus             #> Otu1 \"Moraxellaceae\"      \"Moraxella\"       #> Otu2 \"Corynebacteriaceae\" \"Corynebacterium\" #> Otu3 \"Veillonellaceae\"    \"Veillonella\"     #> Otu4 \"Prevotellaceae\"     \"Prevotella\"      #> Otu5 \"Streptococcaceae\"   \"Streptococcus\"   #> Otu6 \"Pasteurellaceae\"    \"Haemophilus\"     #>      Species                                #> Otu1 \"Moraxella_nonliquefaciens\"            #> Otu2 \"Corynebacterium_pseudodiphtheriticum\" #> Otu3 \"Veillonella_dispar\"                   #> Otu4 \"Prevotella_histicola\"                 #> Otu5 \"Streptococcus_mitis\"                  #> Otu6 \"Haemophilus_haemolyticus\""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/list_example.html","id":null,"dir":"Reference","previous_headings":"","what":"List example files — list_example","title":"List example files — list_example","text":"function lists available example files, found inst/extdata directory.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/list_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List example files — list_example","text":"","code":"list_example(path = NULL)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/list_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List example files — list_example","text":"function adapted readxl::readxl_example() originally created Hadley Wickham & Jennifer Bryan.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/list_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List example files — list_example","text":"path name example file. provided, function lists available example files.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/list_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List example files — list_example","text":"character vector.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/list_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List example files — list_example","text":"","code":"list_example() # Lists example files contained in the package #> [1] \"SRS014470-Tongue_dorsum_profile.txt\" \"merged_abundance_table.txt\"          list_example(\"merged_abundance_table.txt\") # Lists the path of the specified file #> [1] \"/home/runner/work/_temp/Library/metaphlanToPhyloseq/extdata/merged_abundance_table.txt\""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/load_metaphlan_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MetaPhlAn profile(s) — load_metaphlan_profile","title":"Load MetaPhlAn profile(s) — load_metaphlan_profile","text":"Function load MetaPhlAn profile file path.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/load_metaphlan_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MetaPhlAn profile(s) — load_metaphlan_profile","text":"","code":"load_metaphlan_profile(path, merged_profiles = TRUE)"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/load_metaphlan_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MetaPhlAn profile(s) — load_metaphlan_profile","text":"path character string containing path file read. merged_profiles Logical; TRUE (default) file loaded assumed multiple merged MetaPhlAn profiles.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/load_metaphlan_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MetaPhlAn profile(s) — load_metaphlan_profile","text":"data frame containing MetaPhlAn results.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/load_metaphlan_profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load MetaPhlAn profile(s) — load_metaphlan_profile","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/load_metaphlan_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load MetaPhlAn profile(s) — load_metaphlan_profile","text":"","code":"path <- list_example(\"merged_abundance_table.txt\") data <- load_metaphlan_profile(path = path) head(data) #>                                             clade_name SRS014459.Stool #> 1                                         UNCLASSIFIED             100 #> 2                                          k__Bacteria               0 #> 3                        k__Bacteria|p__Proteobacteria               0 #> 4                        k__Bacteria|p__Actinobacteria               0 #> 5 k__Bacteria|p__Proteobacteria|c__Gammaproteobacteria               0 #> 6       k__Bacteria|p__Actinobacteria|c__Actinomycetia               0 #>   SRS014464.Anterior_nares SRS014470.Tongue_dorsum SRS014472.Buccal_mucosa #> 1                  0.00000                       0                  0.0000 #> 2                100.00000                     100                100.0000 #> 3                 81.20128                       0                 14.7449 #> 4                 18.79872                       0                  0.0000 #> 5                 81.20128                       0                 14.7449 #> 6                 18.79872                       0                  0.0000 #>   SRS014476.Supragingival_plaque SRS014494.Posterior_fornix #> 1                        0.00000                          0 #> 2                      100.00000                        100 #> 3                        0.00000                          0 #> 4                       85.43048                          0 #> 5                        0.00000                          0 #> 6                       85.43048                          0"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/merged_abundance_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Merged MetaPhlAn profiles data — merged_abundance_profiles","title":"Merged MetaPhlAn profiles data — merged_abundance_profiles","text":"Example data multiple MetaPhlAn profiles merged one file.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/merged_abundance_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merged MetaPhlAn profiles data — merged_abundance_profiles","text":"","code":"merged_abundance_profiles"},{"path":[]},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/merged_abundance_profiles.html","id":"merged-abundance-profiles","dir":"Reference","previous_headings":"","what":"merged_abundance_profiles","title":"Merged MetaPhlAn profiles data — merged_abundance_profiles","text":"data frame 59 rows 7 columns: clade_name taxonomic lineage taxon reported line. Taxon names prefixed one-letter codes help indicate rank. SRS0144... sample names sample-specific abundance profiles found column.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/merged_abundance_profiles.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Merged MetaPhlAn profiles data — merged_abundance_profiles","text":"https://github.com/biobakery/biobakery/wiki/MetaPhlAn-4.1","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlanToPhyloseq-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metaphlanToPhyloseq: Convert MetaPhlAn taxonomic profiles to phyloseq objects — metaphlanToPhyloseq-package","title":"metaphlanToPhyloseq: Convert MetaPhlAn taxonomic profiles to phyloseq objects — metaphlanToPhyloseq-package","text":"Simple package load MetaPhlAn taxonomic profiles, clean filter based specified taxonomic rank abundance threshold, create phyloseq object .","code":""},{"path":[]},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlanToPhyloseq-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metaphlanToPhyloseq: Convert MetaPhlAn taxonomic profiles to phyloseq objects — metaphlanToPhyloseq-package","text":"Maintainer: Jeremy Rotzetter first.last@example.com (ORCID)","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"function converts MetaPhlAn profile phyloseq object give file path pre-loaded table.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"","code":"metaphlan_to_phyloseq(   mtphlan_profile,   taxa_lvl,   metadata = NULL,   sample_column = NULL,   use_taxa_names = FALSE,   merged_profiles = TRUE )"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"mtphlan_profile MetaPhlAn profile converted. can either file path data frame MetaPhlAn profile(s). taxa_lvl taxonomic level filter profile . Valid options 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'. First letter abbreviations also accepted. metadata Optional metadata samples. provided, data frame. sample_column character string. column metadata containing sample names. match column names MetaPhlAn profile. use_taxa_names Logical indicating whether use taxonomic names instead OTUs resulting phyloseq object. Default FALSE. merged_profiles Logical; TRUE (default) file loaded assumed multiple merged MetaPhlAn profiles.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"phyloseq object representing MetaPhlAn profile.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"mtphlan_profile already loaded object, filtered chosen taxonomic rank prior calling metaphlan_to_phyloseq(). clade names also shortened, otherwise taxonomic table created. wish use taxonomic names specified rank row names phyloseq object, set use_taxa_names = TRUE.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/metaphlan_to_phyloseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert MetaPhlAn profile to phyloseq object — metaphlan_to_phyloseq","text":"","code":"metaphlan_to_phyloseq(species_only, taxa_lvl = \"s\") #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 12 taxa and 6 samples ] #> tax_table()   Taxonomy Table:    [ 12 taxa by 7 taxonomic ranks ]"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"function shortens taxonomic names clades given dataset based specified taxonomic level, using first letter taxonomic rank + \"__\" rank identifiers.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"","code":"shorten_clade_names(   data,   taxa_lvl,   apply_to_colnames = TRUE,   selected_cols = NULL )"},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"data input dataset. Assumes clade names structure k__Bacteria|p__Firmicutes|c__Bacilli|o__Lactobacillales|f__Lactobacillaceae found 'clade_name' column column names . taxa_lvl taxonomic level clade names shortened. Valid options include 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'. First letter abbreviations (e.g., 's') also accepted. apply_to_colnames Logical indicating whether shortening applied column names row values. Default TRUE. selected_cols character vector specifying columns shortening applied. NULL (default), shortening applied columns.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"dataset clade names shortened based specified taxonomic level. case entries matching chosen taxonomic rank, either returned '', follow structure, name shortened last taxonomic entry (see rows 2, 5 6 example)","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"function intended used workflow creation phyloseq objects full sequence taxonomic names needed creation taxonomy table get_taxa_table(). may however useful analyses plots created directly /dataframes. function uses dplyr package data manipulation.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"Jérémy Rotzetter","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/shorten_clade_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorten clade names in a dataset to chosen taxonomic level — shorten_clade_names","text":"","code":"head(merged_abundance_profiles$clade_name) #> [1] \"UNCLASSIFIED\"                                         #> [2] \"k__Bacteria\"                                          #> [3] \"k__Bacteria|p__Proteobacteria\"                        #> [4] \"k__Bacteria|p__Actinobacteria\"                        #> [5] \"k__Bacteria|p__Proteobacteria|c__Gammaproteobacteria\" #> [6] \"k__Bacteria|p__Actinobacteria|c__Actinomycetia\"        taxa_shortened <- shorten_clade_names(   merged_abundance_profiles,   \"Phylum\",   apply_to_colnames = FALSE,   selected_cols = \"clade_name\" )  head(taxa_shortened$clade_name) #> [1] \"UNCLASSIFIED\"           \"k__Bacteria\"            \"Proteobacteria\"         #> [4] \"Actinobacteria\"         \"c__Gammaproteobacteria\" \"c__Actinomycetia\""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/single_abundance_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"SRS014470-Tongue_dorsum_profile data — single_abundance_profile","title":"SRS014470-Tongue_dorsum_profile data — single_abundance_profile","text":"Example data single MetaPhlAn profile output file, containing computed taxon abundances.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/single_abundance_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SRS014470-Tongue_dorsum_profile data — single_abundance_profile","text":"","code":"single_abundance_profile"},{"path":[]},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/single_abundance_profile.html","id":"single-abundance-profile","dir":"Reference","previous_headings":"","what":"single_abundance_profile","title":"SRS014470-Tongue_dorsum_profile data — single_abundance_profile","text":"data frame 15 rows 4 columns: clade_name taxonomic lineage taxon reported line. Taxon names prefixed one-letter codes help indicate rank. NCBI_tax_id NCBI-equivalent taxon IDs named taxa clade_name. relative_abundance taxon's relative abundance %. additional_species Additional species names cases metagenome profile contains clades represent multiple species. species listed column 1 representative species cases.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/single_abundance_profile.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SRS014470-Tongue_dorsum_profile data — single_abundance_profile","text":"https://github.com/biobakery/biobakery/wiki/MetaPhlAn-4.1","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/species_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Merged MetaPhlAn profiles data to species level — species_only","title":"Merged MetaPhlAn profiles data to species level — species_only","text":"Example data multiple MetaPhlAn profiles merged one file, filtered filter_taxa_lvl(df, taxa_lvl = \"s\") include species-level.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/species_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merged MetaPhlAn profiles data to species level — species_only","text":"","code":"species_only"},{"path":[]},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/species_only.html","id":"species-only","dir":"Reference","previous_headings":"","what":"species_only","title":"Merged MetaPhlAn profiles data to species level — species_only","text":"data frame 12 rows 7 columns: clade_name taxonomic lineage taxon reported line. Taxon names prefixed one-letter codes help indicate rank. SRS0144... sample names sample-specific abundance profiles found column.","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/reference/species_only.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Merged MetaPhlAn profiles data to species level — species_only","text":"https://github.com/biobakery/biobakery/wiki/MetaPhlAn-4.1","code":""},{"path":"https://jrotzetter.github.io/metaphlanToPhyloseq/news/index.html","id":"metaphlantophyloseq-010","dir":"Changelog","previous_headings":"","what":"metaphlanToPhyloseq 0.1.0","title":"metaphlanToPhyloseq 0.1.0","text":"shorten_clade_names() now also works data wasn’t pre-filtered chosen taxonomic rank, returning taxon without rank prefix chosen rank , last taxon rank prefix others clarity reminder data filtered specific taxonomic rank. planned feature, made possible load metadata directly path metaphlan_to_phyloseq(), discarded due large number file formats metadata can available. Fixed valid taxonomic rank check cases ‘order’ written .","code":""}]
